{"ast":null,"code":"import _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/kenzman/Desktop/ethglobal/MEDISYNC/Frontend Boilerplate/src/UI/ShapeButton/index.jsx\";\n// components\nimport { Badge } from '@ui/Badge/style';\n\n// styling\n\nimport theme from 'styled-theming';\nimport { dark, light, flex, colors } from '@styles/vars';\n\n// utils\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bg = theme('theme', {\n  light: light.bodyBg,\n  dark: dark.highlight\n});\nexport const Button = _styled.button.withConfig({\n  displayName: \"ShapeButton__Button\",\n  componentId: \"sc-1ccarv-0\"\n})([\"width:40px;aspect-ratio:1;background-color:\", \";color:\", \";\", \" \", \" position:relative;transition:color var(--transition),background-color var(--transition);&:hover,&:focus{background-color:\", \";color:#fff;}.badge{position:absolute;}&.square{border-radius:8px;.badge{top:-6px;right:-6px;}}&.round{border-radius:50%;.badge{top:0;right:0;}}\"], bg, colors.gray, flex.col, flex.center, colors.blue);\n_c = Button;\nconst ShapeButton = ({\n  hasNotification,\n  icon,\n  handler,\n  label,\n  shape,\n  ...props\n}) => {\n  return /*#__PURE__*/_jsxDEV(Button, {\n    className: shape,\n    onClick: handler,\n    \"aria-label\": label,\n    ref: props.ref,\n    ...props,\n    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n      className: `icon-${icon}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), hasNotification && /*#__PURE__*/_jsxDEV(Badge, {\n      className: \"badge\",\n      color: \"yellow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_c2 = ShapeButton;\nShapeButton.propTypes = {\n  hasNotification: PropTypes.bool,\n  icon: PropTypes.string.isRequired,\n  handler: PropTypes.func,\n  label: PropTypes.string.isRequired,\n  shape: PropTypes.oneOf(['round', 'square']).isRequired\n};\nexport default ShapeButton;\nvar _c, _c2;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"ShapeButton\");","map":{"version":3,"names":["Badge","theme","dark","light","flex","colors","PropTypes","jsxDEV","_jsxDEV","bg","bodyBg","highlight","Button","styled","button","withConfig","displayName","componentId","gray","col","center","blue","_c","ShapeButton","hasNotification","icon","handler","label","shape","props","className","onClick","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","color","_c2","propTypes","bool","string","isRequired","func","oneOf","$RefreshReg$"],"sources":["/Users/kenzman/Desktop/ethglobal/MEDISYNC/Frontend Boilerplate/src/UI/ShapeButton/index.jsx"],"sourcesContent":["// components\nimport {Badge} from '@ui/Badge/style';\n\n// styling\nimport styled from 'styled-components/macro';\nimport theme from 'styled-theming';\nimport {dark, light, flex, colors} from '@styles/vars';\n\n// utils\nimport PropTypes from 'prop-types';\n\nconst bg = theme('theme', {\n    light: light.bodyBg,\n    dark: dark.highlight\n})\n\nexport const Button = styled.button`\n  width: 40px;\n  aspect-ratio: 1;\n  background-color: ${bg};\n  color: ${colors.gray};\n  ${flex.col}\n  ${flex.center}\n  position: relative;\n  transition: color var(--transition), background-color var(--transition);\n  \n  &:hover, &:focus {\n    background-color: ${colors.blue};\n    color: #fff;\n  }\n  \n  .badge {\n    position: absolute;\n  }\n  \n  &.square {\n    border-radius: 8px;\n    .badge {\n        top: -6px;\n        right: -6px;\n    }\n  }\n  \n  &.round {\n    border-radius: 50%;\n    .badge {\n        top: 0;\n        right: 0;\n    }\n  }\n`\n\nconst ShapeButton = ({hasNotification, icon, handler, label, shape, ...props}) => {\n    return (\n        <Button className={shape} onClick={handler} aria-label={label} ref={props.ref} {...props}>\n            <i className={`icon-${icon}`}></i>\n            {hasNotification && <Badge className=\"badge\" color=\"yellow\" />}\n        </Button>\n    )\n}\n\nShapeButton.propTypes = {\n    hasNotification: PropTypes.bool,\n    icon: PropTypes.string.isRequired,\n    handler: PropTypes.func,\n    label: PropTypes.string.isRequired,\n    shape: PropTypes.oneOf(['round', 'square']).isRequired\n}\n\nexport default ShapeButton;"],"mappings":";;AAAA;AACA,SAAQA,KAAK,QAAO,iBAAiB;;AAErC;;AAEA,OAAOC,KAAK,MAAM,gBAAgB;AAClC,SAAQC,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,MAAM,QAAO,cAAc;;AAEtD;AACA,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,EAAE,GAAGR,KAAK,CAAC,OAAO,EAAE;EACtBE,KAAK,EAAEA,KAAK,CAACO,MAAM;EACnBR,IAAI,EAAEA,IAAI,CAACS;AACf,CAAC,CAAC;AAEF,OAAO,MAAMC,MAAM,GAAGC,OAAM,CAACC,MAAM,CAAAC,UAAA;EAAAC,WAAA;EAAAC,WAAA;AAAA,2VAGbR,EAAE,EACbJ,MAAM,CAACa,IAAI,EAClBd,IAAI,CAACe,GAAG,EACRf,IAAI,CAACgB,MAAM,EAKSf,MAAM,CAACgB,IAAI,CAuBlC;AAAAC,EAAA,GAlCYV,MAAM;AAoCnB,MAAMW,WAAW,GAAGA,CAAC;EAACC,eAAe;EAAEC,IAAI;EAAEC,OAAO;EAAEC,KAAK;EAAEC,KAAK;EAAE,GAAGC;AAAK,CAAC,KAAK;EAC9E,oBACIrB,OAAA,CAACI,MAAM;IAACkB,SAAS,EAAEF,KAAM;IAACG,OAAO,EAAEL,OAAQ;IAAC,cAAYC,KAAM;IAACK,GAAG,EAAEH,KAAK,CAACG,GAAI;IAAA,GAAKH,KAAK;IAAAI,QAAA,gBACpFzB,OAAA;MAAGsB,SAAS,EAAG,QAAOL,IAAK;IAAE;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjCb,eAAe,iBAAIhB,OAAA,CAACR,KAAK;MAAC8B,SAAS,EAAC,OAAO;MAACQ,KAAK,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEjB,CAAC;AAAAE,GAAA,GAPKhB,WAAW;AASjBA,WAAW,CAACiB,SAAS,GAAG;EACpBhB,eAAe,EAAElB,SAAS,CAACmC,IAAI;EAC/BhB,IAAI,EAAEnB,SAAS,CAACoC,MAAM,CAACC,UAAU;EACjCjB,OAAO,EAAEpB,SAAS,CAACsC,IAAI;EACvBjB,KAAK,EAAErB,SAAS,CAACoC,MAAM,CAACC,UAAU;EAClCf,KAAK,EAAEtB,SAAS,CAACuC,KAAK,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAACF;AAChD,CAAC;AAED,eAAepB,WAAW;AAAC,IAAAD,EAAA,EAAAiB,GAAA;AAAAO,YAAA,CAAAxB,EAAA;AAAAwB,YAAA,CAAAP,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}