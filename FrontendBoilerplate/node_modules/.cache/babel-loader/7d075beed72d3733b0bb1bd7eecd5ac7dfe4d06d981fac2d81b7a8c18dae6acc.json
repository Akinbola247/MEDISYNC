{"ast":null,"code":"var _jsxFileName = \"/Users/kenzman/Desktop/ethglobal/MEDISYNC/Frontend Boilerplate/src/widgets/PatientsTests/index.jsx\",\n  _s = $RefreshSig$();\n// styled components\nimport { List, Header } from '@widgets/PatientsTests/style';\n\n// components\nimport Widget from '@components/Widget';\nimport WidgetBody from '@components/Widget/WidgetBody';\nimport CustomSelect from '@ui/Select';\nimport MonthNavigator from '@ui/Navigator/MonthNavigator';\nimport SearchBar from '@ui/SearchBar';\nimport TestItem from '@components/TestItem';\nimport GroupSeparator from '@ui/GroupSeparator';\nimport NoDataPlaceholder from '@components/NoDataPlaceholder';\n\n// utils\nimport { testsOptions } from '@constants/options';\nimport moment from 'moment';\n\n// hooks\nimport { useEffect, useRef, useState } from 'react';\n\n// data placeholder\nimport { patient_tests } from '@db/patient_tests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientsTests = () => {\n  _s();\n  const contentRef = useRef(null);\n  const currentMonth = new Date().getMonth();\n  const [category, setCategory] = useState(testsOptions[0]);\n  const [month, setMonth] = useState({\n    label: 'This month',\n    number: currentMonth\n  });\n  const [search, setSearch] = useState('');\n  const uniqueDates = [...new Set(patient_tests.map(item => moment(item.date).format('DD MMM YYYY')))];\n  const filteredTests = patient_tests.filter(test => {\n    const testDate = new Date(test.date);\n    const testMonth = testDate.getMonth();\n    const testName = test.title.toLowerCase();\n    const testCategory = test.type.toLowerCase();\n    const doctorName = test.doctor.toLowerCase();\n    const queryMatch = testName.includes(search.toLowerCase()) || doctorName.includes(search.toLowerCase());\n    const categoryMatch = category.value === 'all' || testCategory === category.value;\n    return testMonth === month.number && queryMatch && categoryMatch;\n  });\n  const drawTests = () => {\n    return uniqueDates.map(date => {\n      const tests = filteredTests.filter(test => moment(test.date).format('DD MMM YYYY') === date);\n      const isToday = moment(date).isSame(new Date(), 'day');\n      return tests.length !== 0 && new Date(date).getMonth() === month.number && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(GroupSeparator, {\n          text: isToday ? 'Today\\'s visit' : date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          children: tests.map(test => /*#__PURE__*/_jsxDEV(TestItem, {\n            data: test\n          }, `${test.id}-${search}-${category.value}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 48\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this)]\n      }, date, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this);\n    });\n  };\n  useEffect(() => {\n    var _contentRef$current;\n    (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }, [month, search]);\n  return /*#__PURE__*/_jsxDEV(Widget, {\n    name: \"PatientsTests\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(CustomSelect, {\n          options: testsOptions,\n          variant: \"minimal\",\n          value: category,\n          changeHandler: e => setCategory(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MonthNavigator, {\n          state: month,\n          handler: setMonth,\n          loop: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        placeholder: \"Search a doctor or medical test\",\n        handler: setSearch,\n        value: search\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(WidgetBody, {\n      style: {\n        padding: 0\n      },\n      elRef: contentRef,\n      children: filteredTests.length !== 0 ? drawTests() : /*#__PURE__*/_jsxDEV(NoDataPlaceholder, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 61\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(PatientsTests, \"CQYlsgi7ix4jBUigyG045+bfNPQ=\");\n_c = PatientsTests;\nexport default PatientsTests;\nvar _c;\n$RefreshReg$(_c, \"PatientsTests\");","map":{"version":3,"names":["List","Header","Widget","WidgetBody","CustomSelect","MonthNavigator","SearchBar","TestItem","GroupSeparator","NoDataPlaceholder","testsOptions","moment","useEffect","useRef","useState","patient_tests","jsxDEV","_jsxDEV","PatientsTests","_s","contentRef","currentMonth","Date","getMonth","category","setCategory","month","setMonth","label","number","search","setSearch","uniqueDates","Set","map","item","date","format","filteredTests","filter","test","testDate","testMonth","testName","title","toLowerCase","testCategory","type","doctorName","doctor","queryMatch","includes","categoryMatch","value","drawTests","tests","isToday","isSame","length","children","text","fileName","_jsxFileName","lineNumber","columnNumber","data","id","_contentRef$current","current","scrollTo","top","behavior","name","className","options","variant","changeHandler","e","state","handler","loop","placeholder","style","padding","elRef","_c","$RefreshReg$"],"sources":["/Users/kenzman/Desktop/ethglobal/MEDISYNC/Frontend Boilerplate/src/widgets/PatientsTests/index.jsx"],"sourcesContent":["// styled components\nimport {List, Header} from '@widgets/PatientsTests/style';\n\n// components\nimport Widget from '@components/Widget';\nimport WidgetBody from '@components/Widget/WidgetBody';\nimport CustomSelect from '@ui/Select';\nimport MonthNavigator from '@ui/Navigator/MonthNavigator';\nimport SearchBar from '@ui/SearchBar';\nimport TestItem from '@components/TestItem';\nimport GroupSeparator from '@ui/GroupSeparator';\nimport NoDataPlaceholder from '@components/NoDataPlaceholder';\n\n// utils\nimport {testsOptions} from '@constants/options';\nimport moment from 'moment';\n\n// hooks\nimport {useEffect, useRef, useState} from 'react';\n\n// data placeholder\nimport {patient_tests} from '@db/patient_tests';\n\nconst PatientsTests = () => {\n    const contentRef = useRef(null);\n    const currentMonth = new Date().getMonth();\n    const [category, setCategory] = useState(testsOptions[0]);\n    const [month, setMonth] = useState({label: 'This month', number: currentMonth});\n    const [search, setSearch] = useState('');\n    const uniqueDates = [...new Set(patient_tests.map(item => moment(item.date).format('DD MMM YYYY')))];\n\n    const filteredTests = patient_tests.filter(test => {\n        const testDate = new Date(test.date);\n        const testMonth = testDate.getMonth();\n        const testName = test.title.toLowerCase();\n        const testCategory = test.type.toLowerCase();\n        const doctorName = test.doctor.toLowerCase();\n        const queryMatch = testName.includes(search.toLowerCase()) || doctorName.includes(search.toLowerCase());\n        const categoryMatch = category.value === 'all' || testCategory === category.value;\n\n        return (\n            testMonth === month.number\n            && queryMatch\n            && categoryMatch\n        );\n    })\n\n    const drawTests = () => {\n        return uniqueDates.map(date => {\n            const tests = filteredTests.filter(test => moment(test.date).format('DD MMM YYYY') === date);\n            const isToday = moment(date).isSame(new Date(), 'day');\n\n            return (\n                tests.length !== 0 && new Date(date).getMonth() === month.number && (\n                    <div key={date}>\n                        <GroupSeparator text={isToday ? 'Today\\'s visit' : date}/>\n                        <List>\n                            {tests.map(test => <TestItem key={`${test.id}-${search}-${category.value}`} data={test}/>)}\n                        </List>\n                    </div>\n                )\n            )\n        })\n    }\n\n    useEffect(() => {\n        contentRef.current?.scrollTo({\n            top: 0,\n            behavior: 'smooth'\n        });\n    }, [month, search])\n\n    return (\n        <Widget name=\"PatientsTests\">\n            <Header>\n                <div className=\"wrapper\">\n                    <CustomSelect options={testsOptions}\n                                  variant=\"minimal\"\n                                  value={category}\n                                  changeHandler={e => setCategory(e)}\n                    />\n                    <MonthNavigator state={month} handler={setMonth} loop={false}/>\n                </div>\n                <SearchBar placeholder=\"Search a doctor or medical test\" handler={setSearch} value={search}/>\n            </Header>\n            <WidgetBody style={{padding: 0}} elRef={contentRef}>\n                {filteredTests.length !== 0 ? drawTests() : <NoDataPlaceholder/>}\n            </WidgetBody>\n        </Widget>\n    )\n}\n\nexport default PatientsTests;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}