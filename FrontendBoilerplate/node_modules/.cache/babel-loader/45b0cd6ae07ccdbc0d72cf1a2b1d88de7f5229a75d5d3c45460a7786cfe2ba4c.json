{"ast":null,"code":"var _jsxFileName = \"/Users/kenzman/Desktop/ethglobal/MEDISYNC/Frontend Boilerplate/src/components/AppointmentsCalendar/TimeSlot/index.jsx\";\n// utils\nimport { cloneElement } from 'react';\nimport moment from 'moment';\nimport { addZero } from '@utils/numbers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimeSlot = (props, step, day, isRender) => {\n  const differenceMs = moment() - moment(props.value);\n  const isCurrentTimeSlot = differenceMs / (60 * 1000) > 0 && differenceMs / (60 * 1000) < step;\n  let hours = new Date().getHours(),\n    minutes = new Date().getMinutes();\n  const currentTime = hours + ':' + addZero(minutes);\n  let timeIndicator = {};\n  let addStyle = {};\n  function calculateIndicatorPosition() {\n    let minutesFromProps = props.value.getMinutes(),\n      indicatorPosition;\n    switch (minutesFromProps) {\n      default:\n      case 0:\n        indicatorPosition = minutesFromProps + minutes;\n        break;\n      case 30:\n        indicatorPosition = Math.abs(minutesFromProps - minutes);\n        break;\n    }\n    return indicatorPosition;\n  }\n  if (isCurrentTimeSlot && isRender) {\n    timeIndicator.className = 'current-time';\n    timeIndicator.children = /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"time-indicator\",\n      style: {\n        top: `${100 / step * calculateIndicatorPosition()}%`\n      },\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"label\",\n        children: currentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/cloneElement(props.children, {\n    style: {\n      ...addStyle\n    },\n    'data-time': moment(props.value).format('HH:mm'),\n    ...timeIndicator\n  });\n};\n_c = TimeSlot;\nexport default TimeSlot;\nvar _c;\n$RefreshReg$(_c, \"TimeSlot\");","map":{"version":3,"names":["cloneElement","moment","addZero","jsxDEV","_jsxDEV","TimeSlot","props","step","day","isRender","differenceMs","value","isCurrentTimeSlot","hours","Date","getHours","minutes","getMinutes","currentTime","timeIndicator","addStyle","calculateIndicatorPosition","minutesFromProps","indicatorPosition","Math","abs","className","children","style","top","fileName","_jsxFileName","lineNumber","columnNumber","format","_c","$RefreshReg$"],"sources":["/Users/kenzman/Desktop/ethglobal/MEDISYNC/Frontend Boilerplate/src/components/AppointmentsCalendar/TimeSlot/index.jsx"],"sourcesContent":["// utils\nimport {cloneElement} from 'react';\nimport moment from 'moment';\nimport {addZero} from '@utils/numbers';\n\nconst TimeSlot = (props, step, day, isRender) => {\n    const differenceMs = moment() - moment(props.value)\n    const isCurrentTimeSlot = (differenceMs / (60 * 1000)) > 0 && (differenceMs / (60 * 1000)) < step;\n    let hours = new Date().getHours(),\n        minutes = new Date().getMinutes();\n    const currentTime = hours + ':' + addZero(minutes);\n\n    let timeIndicator = {}\n    let addStyle = {}\n\n    function calculateIndicatorPosition() {\n        let minutesFromProps = props.value.getMinutes(),\n            indicatorPosition;\n        switch (minutesFromProps) {\n            default:\n            case 0:\n                indicatorPosition = minutesFromProps + minutes;\n                break;\n            case 30:\n                indicatorPosition = Math.abs(minutesFromProps - minutes);\n                break;\n        }\n        return indicatorPosition;\n    }\n\n    if (isCurrentTimeSlot && isRender) {\n        timeIndicator.className = 'current-time'\n        timeIndicator.children =\n            <span className=\"time-indicator\" style={{top: `${100 / step * calculateIndicatorPosition()}%`}}>\n                <span className=\"label\">{currentTime}</span>\n            </span>\n    }\n\n    return cloneElement(\n        props.children,\n        {\n            style: {...addStyle},\n            'data-time': moment(props.value).format('HH:mm'),\n            ...timeIndicator\n        })\n}\n\nexport default TimeSlot;"],"mappings":";AAAA;AACA,SAAQA,YAAY,QAAO,OAAO;AAClC,OAAOC,MAAM,MAAM,QAAQ;AAC3B,SAAQC,OAAO,QAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAEC,IAAI,EAAEC,GAAG,EAAEC,QAAQ,KAAK;EAC7C,MAAMC,YAAY,GAAGT,MAAM,CAAC,CAAC,GAAGA,MAAM,CAACK,KAAK,CAACK,KAAK,CAAC;EACnD,MAAMC,iBAAiB,GAAIF,YAAY,IAAI,EAAE,GAAG,IAAI,CAAC,GAAI,CAAC,IAAKA,YAAY,IAAI,EAAE,GAAG,IAAI,CAAC,GAAIH,IAAI;EACjG,IAAIM,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAC7BC,OAAO,GAAG,IAAIF,IAAI,CAAC,CAAC,CAACG,UAAU,CAAC,CAAC;EACrC,MAAMC,WAAW,GAAGL,KAAK,GAAG,GAAG,GAAGX,OAAO,CAACc,OAAO,CAAC;EAElD,IAAIG,aAAa,GAAG,CAAC,CAAC;EACtB,IAAIC,QAAQ,GAAG,CAAC,CAAC;EAEjB,SAASC,0BAA0BA,CAAA,EAAG;IAClC,IAAIC,gBAAgB,GAAGhB,KAAK,CAACK,KAAK,CAACM,UAAU,CAAC,CAAC;MAC3CM,iBAAiB;IACrB,QAAQD,gBAAgB;MACpB;MACA,KAAK,CAAC;QACFC,iBAAiB,GAAGD,gBAAgB,GAAGN,OAAO;QAC9C;MACJ,KAAK,EAAE;QACHO,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAACH,gBAAgB,GAAGN,OAAO,CAAC;QACxD;IACR;IACA,OAAOO,iBAAiB;EAC5B;EAEA,IAAIX,iBAAiB,IAAIH,QAAQ,EAAE;IAC/BU,aAAa,CAACO,SAAS,GAAG,cAAc;IACxCP,aAAa,CAACQ,QAAQ,gBAClBvB,OAAA;MAAMsB,SAAS,EAAC,gBAAgB;MAACE,KAAK,EAAE;QAACC,GAAG,EAAG,GAAE,GAAG,GAAGtB,IAAI,GAAGc,0BAA0B,CAAC,CAAE;MAAE,CAAE;MAAAM,QAAA,eAC3FvB,OAAA;QAAMsB,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAET;MAAW;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EACf;EAEA,oBAAOjC,YAAY,CACfM,KAAK,CAACqB,QAAQ,EACd;IACIC,KAAK,EAAE;MAAC,GAAGR;IAAQ,CAAC;IACpB,WAAW,EAAEnB,MAAM,CAACK,KAAK,CAACK,KAAK,CAAC,CAACuB,MAAM,CAAC,OAAO,CAAC;IAChD,GAAGf;EACP,CAAC,CAAC;AACV,CAAC;AAAAgB,EAAA,GAxCK9B,QAAQ;AA0Cd,eAAeA,QAAQ;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}