{"ast":null,"code":"var _jsxFileName = \"/Users/kenzman/Desktop/ethglobal/MEDISYNC/Frontend Boilerplate/src/UI/Navigator/MonthNavigator/index.jsx\";\n// components\nimport Navigator from '@ui/Navigator';\n\n// utils\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MonthNavigator = ({\n  state,\n  handler,\n  loop = true\n}) => {\n  const navigate = e => {\n    const direction = e.currentTarget.dataset.direction;\n    let current = state.number;\n    if (direction === 'prev') {\n      current !== 0 ? current-- : current = 11;\n    } else {\n      current !== 11 ? current++ : current = 0;\n    }\n    handler(prevState => {\n      return {\n        ...prevState,\n        number: current\n      };\n    });\n    let currentMonth = new Date().getMonth(),\n      prevMonth = currentMonth - 1,\n      nextMonth = currentMonth + 1;\n    let label = '';\n    const dateObj = new Date(2022, current, 1);\n    if (current === currentMonth) {\n      label = 'This month';\n    } else if (current === prevMonth) {\n      label = 'Previous month';\n    } else if (current === nextMonth) {\n      label = 'Next month';\n    } else {\n      label = dateObj.toLocaleString('en-US', {\n        month: 'long'\n      });\n    }\n    handler(prevState => {\n      return {\n        ...prevState,\n        label: label\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Navigator, {\n    handler: navigate,\n    text: state.label,\n    prevDisabled: !loop && state.number === 0,\n    nextDisabled: !loop && state.number === new Date().getMonth()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_c = MonthNavigator;\nMonthNavigator.propTypes = {\n  state: PropTypes.shape({\n    number: PropTypes.number.isRequired,\n    label: PropTypes.string.isRequired\n  }).isRequired,\n  handler: PropTypes.func.isRequired\n};\nexport default MonthNavigator;\nvar _c;\n$RefreshReg$(_c, \"MonthNavigator\");","map":{"version":3,"names":["Navigator","PropTypes","jsxDEV","_jsxDEV","MonthNavigator","state","handler","loop","navigate","e","direction","currentTarget","dataset","current","number","prevState","currentMonth","Date","getMonth","prevMonth","nextMonth","label","dateObj","toLocaleString","month","text","prevDisabled","nextDisabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","shape","isRequired","string","func","$RefreshReg$"],"sources":["/Users/kenzman/Desktop/ethglobal/MEDISYNC/Frontend Boilerplate/src/UI/Navigator/MonthNavigator/index.jsx"],"sourcesContent":["// components\nimport Navigator from '@ui/Navigator';\n\n// utils\nimport PropTypes from 'prop-types';\n\nconst MonthNavigator = ({state, handler, loop = true}) => {\n\n    const navigate = e => {\n        const direction = e.currentTarget.dataset.direction;\n        let current = state.number;\n\n        if (direction === 'prev') {\n            current !== 0 ? current-- : current = 11;\n        } else {\n            current !== 11 ? current++ : current = 0;\n        }\n        handler(prevState => {\n            return {...prevState, number: current}\n        });\n\n        let currentMonth = new Date().getMonth(),\n            prevMonth = currentMonth - 1,\n            nextMonth = currentMonth + 1;\n\n        let label = '';\n        const dateObj = new Date(2022, current, 1);\n\n        if (current === currentMonth) {\n            label = 'This month'\n        } else if (current === prevMonth) {\n            label = 'Previous month';\n        } else if (current === nextMonth) {\n            label = 'Next month';\n        } else {\n            label = dateObj.toLocaleString('en-US', {month: 'long'})\n        }\n        handler(prevState => {\n            return {...prevState, label: label}\n        });\n    }\n\n    return (\n        <Navigator handler={navigate}\n                   text={state.label}\n                   prevDisabled={!loop && state.number === 0}\n                   nextDisabled={!loop && state.number === new Date().getMonth()}\n        />\n    )\n}\n\nMonthNavigator.propTypes = {\n    state: PropTypes.shape(\n        {\n            number: PropTypes.number.isRequired,\n            label: PropTypes.string.isRequired\n        }).isRequired,\n    handler: PropTypes.func.isRequired\n}\n\nexport default MonthNavigator;"],"mappings":";AAAA;AACA,OAAOA,SAAS,MAAM,eAAe;;AAErC;AACA,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,cAAc,GAAGA,CAAC;EAACC,KAAK;EAAEC,OAAO;EAAEC,IAAI,GAAG;AAAI,CAAC,KAAK;EAEtD,MAAMC,QAAQ,GAAGC,CAAC,IAAI;IAClB,MAAMC,SAAS,GAAGD,CAAC,CAACE,aAAa,CAACC,OAAO,CAACF,SAAS;IACnD,IAAIG,OAAO,GAAGR,KAAK,CAACS,MAAM;IAE1B,IAAIJ,SAAS,KAAK,MAAM,EAAE;MACtBG,OAAO,KAAK,CAAC,GAAGA,OAAO,EAAE,GAAGA,OAAO,GAAG,EAAE;IAC5C,CAAC,MAAM;MACHA,OAAO,KAAK,EAAE,GAAGA,OAAO,EAAE,GAAGA,OAAO,GAAG,CAAC;IAC5C;IACAP,OAAO,CAACS,SAAS,IAAI;MACjB,OAAO;QAAC,GAAGA,SAAS;QAAED,MAAM,EAAED;MAAO,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAIG,YAAY,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACpCC,SAAS,GAAGH,YAAY,GAAG,CAAC;MAC5BI,SAAS,GAAGJ,YAAY,GAAG,CAAC;IAEhC,IAAIK,KAAK,GAAG,EAAE;IACd,MAAMC,OAAO,GAAG,IAAIL,IAAI,CAAC,IAAI,EAAEJ,OAAO,EAAE,CAAC,CAAC;IAE1C,IAAIA,OAAO,KAAKG,YAAY,EAAE;MAC1BK,KAAK,GAAG,YAAY;IACxB,CAAC,MAAM,IAAIR,OAAO,KAAKM,SAAS,EAAE;MAC9BE,KAAK,GAAG,gBAAgB;IAC5B,CAAC,MAAM,IAAIR,OAAO,KAAKO,SAAS,EAAE;MAC9BC,KAAK,GAAG,YAAY;IACxB,CAAC,MAAM;MACHA,KAAK,GAAGC,OAAO,CAACC,cAAc,CAAC,OAAO,EAAE;QAACC,KAAK,EAAE;MAAM,CAAC,CAAC;IAC5D;IACAlB,OAAO,CAACS,SAAS,IAAI;MACjB,OAAO;QAAC,GAAGA,SAAS;QAAEM,KAAK,EAAEA;MAAK,CAAC;IACvC,CAAC,CAAC;EACN,CAAC;EAED,oBACIlB,OAAA,CAACH,SAAS;IAACM,OAAO,EAAEE,QAAS;IAClBiB,IAAI,EAAEpB,KAAK,CAACgB,KAAM;IAClBK,YAAY,EAAE,CAACnB,IAAI,IAAIF,KAAK,CAACS,MAAM,KAAK,CAAE;IAC1Ca,YAAY,EAAE,CAACpB,IAAI,IAAIF,KAAK,CAACS,MAAM,KAAK,IAAIG,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC;EAAE;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxE,CAAC;AAEV,CAAC;AAAAC,EAAA,GA3CK5B,cAAc;AA6CpBA,cAAc,CAAC6B,SAAS,GAAG;EACvB5B,KAAK,EAAEJ,SAAS,CAACiC,KAAK,CAClB;IACIpB,MAAM,EAAEb,SAAS,CAACa,MAAM,CAACqB,UAAU;IACnCd,KAAK,EAAEpB,SAAS,CAACmC,MAAM,CAACD;EAC5B,CAAC,CAAC,CAACA,UAAU;EACjB7B,OAAO,EAAEL,SAAS,CAACoC,IAAI,CAACF;AAC5B,CAAC;AAED,eAAe/B,cAAc;AAAC,IAAA4B,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}