{"ast":null,"code":"var _jsxFileName = \"/Users/kenzman/Desktop/ethglobal/MEDISYNC/Frontend Boilerplate/src/components/DropFiles/index.jsx\",\n  _s = $RefreshSig$();\n// hooks\nimport { useDropzone } from 'react-dropzone';\nimport useNotistack from '@hooks/useNotistack';\n\n// utils\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst imgTypes = {\n  'image/jpeg': [],\n  'image/png': [],\n  'image/gif': [],\n  'image/bmp': [],\n  'image/webp': [],\n  'image/svg+xml': []\n};\nconst docTypes = {\n  'application/pdf': [],\n  'application/msword': [],\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document': [],\n  'application/vnd.ms-excel': [],\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': []\n};\nconst DropFiles = ({\n  type,\n  multiple,\n  children\n}) => {\n  _s();\n  const {\n    notify\n  } = useNotistack('File has been successfully uploaded.', 'success');\n  const handleDrop = () => notify();\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    accept: type === 'image' ? {\n      ...imgTypes\n    } : {\n      ...docTypes\n    },\n    multiple: multiple,\n    onDrop: handleDrop\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ...getRootProps(),\n    className: isDragActive ? 'dropzone active' : 'dropzone',\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ...getInputProps()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(DropFiles, \"e5Lx+BBiDKZ4RzZICsnNsQ4qF7g=\", false, function () {\n  return [useNotistack, useDropzone];\n});\n_c = DropFiles;\nDropFiles.propTypes = {\n  type: PropTypes.oneOf(['image', 'doc']).isRequired,\n  multiple: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired\n};\nexport default DropFiles;\nvar _c;\n$RefreshReg$(_c, \"DropFiles\");","map":{"version":3,"names":["useDropzone","useNotistack","PropTypes","jsxDEV","_jsxDEV","imgTypes","docTypes","DropFiles","type","multiple","children","_s","notify","handleDrop","getRootProps","getInputProps","isDragActive","accept","onDrop","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","oneOf","isRequired","bool","node","$RefreshReg$"],"sources":["/Users/kenzman/Desktop/ethglobal/MEDISYNC/Frontend Boilerplate/src/components/DropFiles/index.jsx"],"sourcesContent":["// hooks\nimport {useDropzone} from 'react-dropzone';\nimport useNotistack from '@hooks/useNotistack';\n\n// utils\nimport PropTypes from 'prop-types';\n\nconst imgTypes = {\n    'image/jpeg': [],\n    'image/png': [],\n    'image/gif': [],\n    'image/bmp': [],\n    'image/webp': [],\n    'image/svg+xml': []\n}\n\nconst docTypes = {\n    'application/pdf': [],\n    'application/msword': [],\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': [],\n    'application/vnd.ms-excel': [],\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': []\n}\n\nconst DropFiles = ({type, multiple, children}) => {\n    const {notify} = useNotistack('File has been successfully uploaded.', 'success');\n    const handleDrop = () => notify();\n\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive\n    } = useDropzone({\n        accept: type === 'image' ? {...imgTypes} : {...docTypes},\n        multiple: multiple,\n        onDrop: handleDrop\n    });\n\n    return (\n        <div {...getRootProps()} className={isDragActive ? 'dropzone active' : 'dropzone'}>\n            <input {...getInputProps()} />\n            {children}\n        </div>\n    )\n}\n\nDropFiles.propTypes = {\n    type: PropTypes.oneOf(['image', 'doc']).isRequired,\n    multiple: PropTypes.bool.isRequired,\n    children: PropTypes.node.isRequired\n}\n\nexport default DropFiles;"],"mappings":";;AAAA;AACA,SAAQA,WAAW,QAAO,gBAAgB;AAC1C,OAAOC,YAAY,MAAM,qBAAqB;;AAE9C;AACA,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,QAAQ,GAAG;EACb,YAAY,EAAE,EAAE;EAChB,WAAW,EAAE,EAAE;EACf,WAAW,EAAE,EAAE;EACf,WAAW,EAAE,EAAE;EACf,YAAY,EAAE,EAAE;EAChB,eAAe,EAAE;AACrB,CAAC;AAED,MAAMC,QAAQ,GAAG;EACb,iBAAiB,EAAE,EAAE;EACrB,oBAAoB,EAAE,EAAE;EACxB,yEAAyE,EAAE,EAAE;EAC7E,0BAA0B,EAAE,EAAE;EAC9B,mEAAmE,EAAE;AACzE,CAAC;AAED,MAAMC,SAAS,GAAGA,CAAC;EAACC,IAAI;EAAEC,QAAQ;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM;IAACC;EAAM,CAAC,GAAGX,YAAY,CAAC,sCAAsC,EAAE,SAAS,CAAC;EAChF,MAAMY,UAAU,GAAGA,CAAA,KAAMD,MAAM,CAAC,CAAC;EAEjC,MAAM;IACFE,YAAY;IACZC,aAAa;IACbC;EACJ,CAAC,GAAGhB,WAAW,CAAC;IACZiB,MAAM,EAAET,IAAI,KAAK,OAAO,GAAG;MAAC,GAAGH;IAAQ,CAAC,GAAG;MAAC,GAAGC;IAAQ,CAAC;IACxDG,QAAQ,EAAEA,QAAQ;IAClBS,MAAM,EAAEL;EACZ,CAAC,CAAC;EAEF,oBACIT,OAAA;IAAA,GAASU,YAAY,CAAC,CAAC;IAAEK,SAAS,EAAEH,YAAY,GAAG,iBAAiB,GAAG,UAAW;IAAAN,QAAA,gBAC9EN,OAAA;MAAA,GAAWW,aAAa,CAAC;IAAC;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAC7Bb,QAAQ;EAAA;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAAAZ,EAAA,CApBKJ,SAAS;EAAA,QACMN,YAAY,EAOzBD,WAAW;AAAA;AAAAwB,EAAA,GARbjB,SAAS;AAsBfA,SAAS,CAACkB,SAAS,GAAG;EAClBjB,IAAI,EAAEN,SAAS,CAACwB,KAAK,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAACC,UAAU;EAClDlB,QAAQ,EAAEP,SAAS,CAAC0B,IAAI,CAACD,UAAU;EACnCjB,QAAQ,EAAER,SAAS,CAAC2B,IAAI,CAACF;AAC7B,CAAC;AAED,eAAepB,SAAS;AAAC,IAAAiB,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}